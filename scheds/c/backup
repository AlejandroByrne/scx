/* SPDX-License-Identifier: GPL-2.0 */
/*
 * Copyright (c) 2022 Meta Platforms, Inc. and affiliates.
 * Copyright (c) 2022 Tejun Heo <tj@kernel.org>
 * Copyright (c) 2022 David Vernet <dvernet@meta.com>
 */
#include <stdio.h>
#include <unistd.h>
#include <signal.h>
#include <libgen.h>
#include <bpf/bpf.h>
#include <bpf/libbpf.h>
#include <scx/common.h>
#include <sched.h>
#include <assert.h>
#include "scx_test.bpf.skel.h"

#define SCHED_EXT 7 // Replace this with the actual value for SCHED_EXT if it's defined differently

const char help_fmt[] =
"A simple scheduler used for user-space function calls and overhead measurement.\n"
"The purpose is to figure out the feasibility of implementing an ML interface that\n"
"invokes user-space functions for inferences.\n"
"\n"
"The scheduling policy behind the testing purpose is simple weighted vtime.\n"
"\n"
"Usage: %s [-v] [-p]\n"
"\n"
"  -v            Print libbpf debug messages\n"
"  -p			 Run the scheduler in partial mode\n"
"  -h            Display this help and exit\n";

static bool verbose;
static volatile int exit_req;

static int sent_fd, returned_fd;

static s32 input1;
static s32 input2;
static s32 output;

static int libbpf_print_fn(enum libbpf_print_level level, const char *format, va_list args)
{
	if (level == LIBBPF_DEBUG && !verbose)
		return 0;
	return vfprintf(stderr, format, args);
}

static void sigint_handler(int test)
{
	exit_req = 1;
}

static void drain_sent_map(void) {
	while (1) {
		// Two options, one where the first value was already polled in a different time slice
		if (input1 == 0 && bpf_map_lookup_and_delete_elem(sent_fd, NULL, &input1)) {
			bpf_map_lookup_and_delete_elem(sent_fd, NULL, &input2);
			printf("The values polled from the ring buffer are %d and %d", input1, input2);
			output = input1 + input2;
			bpf_map_update_elem(returned_fd, NULL, &output, 0);
			input1 = input2 = output = 0; // reset all values
		} else if (input2 == 0 && bpf_map_lookup_and_delete_elem(sent_fd, NULL, &input2)) {
			printf("The values polled from the ring buffer are %d and %d", input1, input2);
			output = input1 + input2;
			bpf_map_update_elem(returned_fd, NULL, &output, 0);
			input1 = input2 = output = 0; // reset all values
		}
	}
}

int main(int argc, char **argv)
{
	struct scx_test *skel;
	struct bpf_link *link;
	__u32 opt;
	__u64 ecode;
	int err = 0;
	// Schedule this user-space task with SCHED_EXT
    struct sched_param param;
    param.sched_priority = 0; // SCHED_EXT may not use priority, but setting it to 0
    if (sched_setscheduler(0, SCHED_EXT, &param) == -1) {
        // fprintf(stderr, "Error setting scheduler for process %s\n", strerror(errno));
		SCX_BUG_ON(err, "Failed to set scheduler to SCHED_EXT");
    }

	libbpf_set_print(libbpf_print_fn);
	signal(SIGINT, sigint_handler);
	signal(SIGTERM, sigint_handler);
restart:
	skel = SCX_OPS_OPEN(test_ops, scx_test);

	skel->rodata->usersched_pid = getpid();
	assert(skel->rodata->usersched_pid > 0);

	while ((opt = getopt(argc, argv, "vhp")) != -1) {
		switch (opt) {
		case 'v':
			verbose = true;
			break;
		case 'p':
			skel->struct_ops.test_ops->flags |= SCX_OPS_SWITCH_PARTIAL;
			break;
		default:
			fprintf(stderr, help_fmt, basename(argv[0]));
			return opt != 'h';
		}
	}

	SCX_OPS_LOAD(skel, test_ops, scx_test, uei);
	link = SCX_OPS_ATTACH(skel, test_ops, scx_test);

	sent_fd = bpf_map__fd(skel->maps.sent);
	returned_fd = bpf_map__fd(skel->maps.returned);
	assert(sent_fd > 0);
	assert(returned_fd > 0);

	while (!exit_req && !UEI_EXITED(skel, uei)) {
		drain_sent_map();
		sched_yield();
	}

	bpf_link__destroy(link);
	ecode = UEI_REPORT(skel, uei);
	scx_test__destroy(skel);

	if (UEI_ECODE_RESTART(ecode))
		goto restart;
	return 0;
}